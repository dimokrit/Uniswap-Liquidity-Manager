import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { BigNumber, Contract, ContractFactory } from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { ExactInputOptions, ExactInputSingleOptions, ExactOutputSingleOptions, MintOptions, ExactOutputOptions, CollectOptions, IncreaseLiquidityOptions, DecreaseLiquidityOptions } from "../../types";
export declare class UniswapV3Deployer {
    MIN_TICK: number;
    MAX_TICK: number;
    MAX_UINT128: BigNumber;
    Interface: import("./Interface").InterfaceType;
    hre?: HardhatRuntimeEnvironment;
    private _signer;
    private _factory?;
    private _router?;
    private _weth?;
    private _poolInitializer?;
    private _positionManager?;
    private _tokenDescriptor?;
    private _nftDescriptorLibrary?;
    private _tokens;
    constructor(hre: HardhatRuntimeEnvironment, _signer: SignerWithAddress);
    deploy(signer?: SignerWithAddress): Promise<{
        weth9: Contract;
        WETH9: ContractFactory;
        factory: Contract;
        Factory: ContractFactory;
        router: Contract;
        Router: ContractFactory;
        tokenDescriptor: Contract;
        TokenDescriptor: ContractFactory;
        nftDescriptorLibrary: Contract;
        NFTDescriptorLibrary: ContractFactory;
        positionManager: Contract;
        PositionManager: ContractFactory;
    }>;
    getWeth(signer?: SignerWithAddress): Promise<Contract>;
    getFactory(signer?: SignerWithAddress): Promise<Contract>;
    getRouter(signer?: SignerWithAddress): Promise<Contract>;
    getTokenDescriptor(signer?: SignerWithAddress): Promise<Contract>;
    getPositionManager(signer?: SignerWithAddress): Promise<Contract>;
    getNftDescriptorLibrary(signer?: SignerWithAddress): Promise<Contract>;
    createERC20(name: string, symbol: string, signer?: SignerWithAddress): Promise<Contract>;
    getERC20(address: string): Contract | undefined;
    /**
    * @param {ExactInputSingleOptions} options
    * @member {SignerWithAddress} signer
    * @member {string} tokenIn
    * @member {string} tokenOut
    * @member {number} fee
    * @member {number | BigNumber} amountIn
    */
    exactInputSingle(options: ExactInputSingleOptions): Promise<void>;
    /**
    * @param {ExactInputOptions} options
    * @member {SignerWithAddress} signer
    * @member {Array<string | number>} path
    * @member {number | BigNumber} amountin
    */
    exactInput(options: ExactInputOptions): Promise<void>;
    /**
    * @param {ExactOutputSingleOptions} options
    * @member {SignerWithAddress} signer
    * @member {string} tokenIn
    * @member {string} tokenOut
    * @member {number} fee
    * @member {number | BigNumber} amountOut
    */
    exactOutputSingle(options: ExactOutputSingleOptions): Promise<void>;
    /**
    * @param {ExactOutputOptions} options
    * @member {SignerWithAddress} signer
    * @member {Array<string | number>} path
    * @member {number | BigNumber} amountOut
    */
    exactOutput(options: ExactOutputOptions): Promise<void>;
    /**
    * @param {MintOptions} options
    * @member {SignerWithAddress} signer
    * @member {string} token0
    * @member {string} token1
    * @member {number} fee
    * @member {number | BigNumber} amount0Desired
    * @member {number | BigNumber} amount1Desired
    * @member {number} price
    */
    mintPosition(options: MintOptions): Promise<number>;
    /**
    * @param {CollectOptions} options
    * @member {SignerWithAddress} signer
    * @member {number} tokenId
    */
    collectFees(options: CollectOptions): Promise<Number>;
    /**
    * @param {IncreaseLiquidityOptions} options
    * @member {SignerWithAddress} signer
    * @member {number} tokenId
    * @member {number | BigNumber} amount0Desired
    * @member {number | BigNumber} amount1Desired
    */
    increaseLiquidity(options: IncreaseLiquidityOptions): Promise<void>;
    /**
    * @param {DecreaseLiquidityOptions} options
    * @member {SignerWithAddress} signer
    * @member {number} tokenId
    * @member {number | BigNumber} liquidityAmount
    */
    decreaseLiquidity(options: DecreaseLiquidityOptions): Promise<Array<number>>;
}
//# sourceMappingURL=UniswapV3Deployer.d.ts.map