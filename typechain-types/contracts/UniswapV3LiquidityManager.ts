/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UniswapV3LiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "calculatePriceRange"
      | "calculateSqrtPriceX96"
      | "calculateTick"
      | "positionManager"
      | "sqrt"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LiqAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePriceRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSqrtPriceX96",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sqrt", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePriceRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSqrtPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
}

export namespace LiqAddedEvent {
  export type InputTuple = [
    pool: AddressLike,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    lowerTick: bigint,
    upperTick: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    pool: string;
    lowerTick: bigint;
    upperTick: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniswapV3LiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV3LiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: UniswapV3LiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      poolAddress: AddressLike,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      desiredWidth: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  calculatePriceRange: TypedContractMethod<
    [sqrtPriceX96: BigNumberish, desiredWidth: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  calculateSqrtPriceX96: TypedContractMethod<
    [tick: BigNumberish],
    [bigint],
    "view"
  >;

  calculateTick: TypedContractMethod<[price: BigNumberish], [bigint], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  sqrt: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      poolAddress: AddressLike,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      desiredWidth: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculatePriceRange"
  ): TypedContractMethod<
    [sqrtPriceX96: BigNumberish, desiredWidth: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateSqrtPriceX96"
  ): TypedContractMethod<[tick: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTick"
  ): TypedContractMethod<[price: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sqrt"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  getEvent(
    key: "LiqAdded"
  ): TypedContractEvent<
    LiqAddedEvent.InputTuple,
    LiqAddedEvent.OutputTuple,
    LiqAddedEvent.OutputObject
  >;

  filters: {
    "LiqAdded(address,int24,int24,uint256,uint256)": TypedContractEvent<
      LiqAddedEvent.InputTuple,
      LiqAddedEvent.OutputTuple,
      LiqAddedEvent.OutputObject
    >;
    LiqAdded: TypedContractEvent<
      LiqAddedEvent.InputTuple,
      LiqAddedEvent.OutputTuple,
      LiqAddedEvent.OutputObject
    >;
  };
}
